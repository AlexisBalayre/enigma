/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployCollection"
      | "getCollectionAddress"
      | "getCollectionsAddresses"
      | "getCollectionsNumber"
      | "isCollectionAddress"
      | "setSecretNFTContractImplementation"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewCollectionDeployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "deployCollection",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionsAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionsNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCollectionAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecretNFTContractImplementation",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionsAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionsNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCollectionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecretNFTContractImplementation",
    data: BytesLike
  ): Result;
}

export namespace NewCollectionDeployedEvent {
  export type InputTuple = [
    collectionAddress: AddressLike,
    name: string,
    symbol: string
  ];
  export type OutputTuple = [
    collectionAddress: string,
    name: string,
    symbol: string
  ];
  export interface OutputObject {
    collectionAddress: string;
    name: string;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IFactory;
  waitForDeployment(): Promise<this>;

  interface: IFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployCollection: TypedContractMethod<
    [_accessManager: AddressLike, _name: string, _symbol: string],
    [string],
    "nonpayable"
  >;

  getCollectionAddress: TypedContractMethod<
    [_index: BigNumberish],
    [string],
    "view"
  >;

  getCollectionsAddresses: TypedContractMethod<[], [string[]], "view">;

  getCollectionsNumber: TypedContractMethod<[], [bigint], "view">;

  isCollectionAddress: TypedContractMethod<
    [_collection: AddressLike],
    [boolean],
    "view"
  >;

  setSecretNFTContractImplementation: TypedContractMethod<
    [_secretNftContractImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployCollection"
  ): TypedContractMethod<
    [_accessManager: AddressLike, _name: string, _symbol: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCollectionAddress"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCollectionsAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCollectionsNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isCollectionAddress"
  ): TypedContractMethod<[_collection: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setSecretNFTContractImplementation"
  ): TypedContractMethod<
    [_secretNftContractImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NewCollectionDeployed"
  ): TypedContractEvent<
    NewCollectionDeployedEvent.InputTuple,
    NewCollectionDeployedEvent.OutputTuple,
    NewCollectionDeployedEvent.OutputObject
  >;

  filters: {
    "NewCollectionDeployed(address,string,string)": TypedContractEvent<
      NewCollectionDeployedEvent.InputTuple,
      NewCollectionDeployedEvent.OutputTuple,
      NewCollectionDeployedEvent.OutputObject
    >;
    NewCollectionDeployed: TypedContractEvent<
      NewCollectionDeployedEvent.InputTuple,
      NewCollectionDeployedEvent.OutputTuple,
      NewCollectionDeployedEvent.OutputObject
    >;
  };
}
