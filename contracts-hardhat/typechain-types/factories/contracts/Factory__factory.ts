/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Factory, FactoryInterface } from "../../contracts/Factory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_secretNFTContractImplementation",
        type: "address",
      },
      {
        internalType: "contract IAccessManager",
        name: "_accessManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ERC1167FailedCreateClone",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "OnlyAdminCanCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "collectionAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "NewCollectionDeployed",
    type: "event",
  },
  {
    inputs: [],
    name: "accessManager",
    outputs: [
      {
        internalType: "contract IAccessManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAccessManager",
        name: "_accessManager",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    name: "deployCollection",
    outputs: [
      {
        internalType: "address",
        name: "collection",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getCollectionAddress",
    outputs: [
      {
        internalType: "address",
        name: "_collection",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCollectionsAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "_collections",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCollectionsNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "_collectionNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_collection",
        type: "address",
      },
    ],
    name: "isCollectionAddress",
    outputs: [
      {
        internalType: "bool",
        name: "_isCollectionAddress",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "secretNFTContractImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_secretNFTContractImplementation",
        type: "address",
      },
    ],
    name: "setSecretNFTContractImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620010ee380380620010ee833981810160405281019062000037919062000170565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001b7565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f382620000c6565b9050919050565b6200010581620000e6565b81146200011157600080fd5b50565b6000815190506200012581620000fa565b92915050565b60006200013882620000e6565b9050919050565b6200014a816200012b565b81146200015657600080fd5b50565b6000815190506200016a816200013f565b92915050565b600080604083850312156200018a5762000189620000c1565b5b60006200019a8582860162000114565b9250506020620001ad8582860162000159565b9150509250929050565b610f2780620001c76000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636c05f0561161005b5780636c05f05614610115578063bdac3b5314610145578063ef2e12e114610175578063fdcb60681461019357610088565b80632d5ffe8e1461008d578063333671a4146100ab57806333cc7409146100db5780636be5e1ab146100f7575b600080fd5b6100956101b1565b6040516100a29190610850565b60405180910390f35b6100c560048036038101906100c091906108ab565b6101c2565b6040516100d29190610919565b60405180910390f35b6100f560048036038101906100f09190610960565b6101df565b005b6100ff610322565b60405161010c9190610a4b565b60405180910390f35b61012f600480360381019061012a9190610960565b610333565b60405161013c9190610a88565b60405180910390f35b61015f600480360381019061015a9190610c27565b610350565b60405161016c9190610919565b60405180910390f35b61017d61055f565b60405161018a9190610919565b60405180910390f35b61019b610585565b6040516101a89190610d11565b60405180910390f35b60006101bd60006105ab565b905090565b60006101d88260006105c090919063ffffffff16565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336040518363ffffffff1660e01b815260040161025c929190610d45565b602060405180830381865afa158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029d9190610d9a565b6102de57336040517fa3a27afc0000000000000000000000000000000000000000000000000000000081526004016102d59190610919565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061032e60006105da565b905090565b60006103498260006105fb90919063ffffffff16565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d148547fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336040518363ffffffff1660e01b81526004016103cf929190610d45565b602060405180830381865afa1580156103ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104109190610d9a565b61045157336040517fa3a27afc0000000000000000000000000000000000000000000000000000000081526004016104489190610919565b60405180910390fd5b600061047e600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661062b565b90508073ffffffffffffffffffffffffffffffffffffffff1663077f224a8585886040518463ffffffff1660e01b81526004016104bd93929190610e46565b600060405180830381600087803b1580156104d757600080fd5b505af11580156104eb573d6000803e3d6000fd5b505050506105038160006106dc90919063ffffffff16565b508091508073ffffffffffffffffffffffffffffffffffffffff167fb8a4706970925da6afe6fc677a62a72aafebd73a53b1980946ba539a965c4974858560405161054f929190610e8b565b60405180910390a2509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006105b98260000161070c565b9050919050565b60006105cf836000018361071d565b60001c905092915050565b606060006105ea83600001610748565b905060608190508092505050919050565b6000610623836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6107a4565b905092915050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106d7576040517fc2f868f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6000610704836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6107c7565b905092915050565b600081600001805490509050919050565b600082600001828154811061073557610734610ec2565b5b9060005260206000200154905092915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561079857602002820191906000526020600020905b815481526020019060010190808311610784575b50505050509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60006107d383836107a4565b61082c578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050610831565b600090505b92915050565b6000819050919050565b61084a81610837565b82525050565b60006020820190506108656000830184610841565b92915050565b6000604051905090565b600080fd5b600080fd5b61088881610837565b811461089357600080fd5b50565b6000813590506108a58161087f565b92915050565b6000602082840312156108c1576108c0610875565b5b60006108cf84828501610896565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610903826108d8565b9050919050565b610913816108f8565b82525050565b600060208201905061092e600083018461090a565b92915050565b61093d816108f8565b811461094857600080fd5b50565b60008135905061095a81610934565b92915050565b60006020828403121561097657610975610875565b5b60006109848482850161094b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6109c2816108f8565b82525050565b60006109d483836109b9565b60208301905092915050565b6000602082019050919050565b60006109f88261098d565b610a028185610998565b9350610a0d836109a9565b8060005b83811015610a3e578151610a2588826109c8565b9750610a30836109e0565b925050600181019050610a11565b5085935050505092915050565b60006020820190508181036000830152610a6581846109ed565b905092915050565b60008115159050919050565b610a8281610a6d565b82525050565b6000602082019050610a9d6000830184610a79565b92915050565b6000610aae826108f8565b9050919050565b610abe81610aa3565b8114610ac957600080fd5b50565b600081359050610adb81610ab5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b3482610aeb565b810181811067ffffffffffffffff82111715610b5357610b52610afc565b5b80604052505050565b6000610b6661086b565b9050610b728282610b2b565b919050565b600067ffffffffffffffff821115610b9257610b91610afc565b5b610b9b82610aeb565b9050602081019050919050565b82818337600083830152505050565b6000610bca610bc584610b77565b610b5c565b905082815260208101848484011115610be657610be5610ae6565b5b610bf1848285610ba8565b509392505050565b600082601f830112610c0e57610c0d610ae1565b5b8135610c1e848260208601610bb7565b91505092915050565b600080600060608486031215610c4057610c3f610875565b5b6000610c4e86828701610acc565b935050602084013567ffffffffffffffff811115610c6f57610c6e61087a565b5b610c7b86828701610bf9565b925050604084013567ffffffffffffffff811115610c9c57610c9b61087a565b5b610ca886828701610bf9565b9150509250925092565b6000819050919050565b6000610cd7610cd2610ccd846108d8565b610cb2565b6108d8565b9050919050565b6000610ce982610cbc565b9050919050565b6000610cfb82610cde565b9050919050565b610d0b81610cf0565b82525050565b6000602082019050610d266000830184610d02565b92915050565b6000819050919050565b610d3f81610d2c565b82525050565b6000604082019050610d5a6000830185610d36565b610d67602083018461090a565b9392505050565b610d7781610a6d565b8114610d8257600080fd5b50565b600081519050610d9481610d6e565b92915050565b600060208284031215610db057610daf610875565b5b6000610dbe84828501610d85565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e01578082015181840152602081019050610de6565b60008484015250505050565b6000610e1882610dc7565b610e228185610dd2565b9350610e32818560208601610de3565b610e3b81610aeb565b840191505092915050565b60006060820190508181036000830152610e608186610e0d565b90508181036020830152610e748185610e0d565b9050610e836040830184610d02565b949350505050565b60006040820190508181036000830152610ea58185610e0d565b90508181036020830152610eb98184610e0d565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212204e2445bad166da9a0fe49a0d4967094b892e4497fb8026218bc7d9bca4c1d2ea64736f6c63430008140033";

type FactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Factory__factory extends ContractFactory {
  constructor(...args: FactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _secretNFTContractImplementation: AddressLike,
    _accessManager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _secretNFTContractImplementation,
      _accessManager,
      overrides || {}
    );
  }
  override deploy(
    _secretNFTContractImplementation: AddressLike,
    _accessManager: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _secretNFTContractImplementation,
      _accessManager,
      overrides || {}
    ) as Promise<
      Factory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Factory__factory {
    return super.connect(runner) as Factory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FactoryInterface {
    return new Interface(_abi) as FactoryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Factory {
    return new Contract(address, _abi, runner) as unknown as Factory;
  }
}
